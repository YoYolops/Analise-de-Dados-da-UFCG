library(string_c)
library(str_c)
install.packages(stringr)
install.packages("stringr")
stringr
?stringr
?str_c
?factor
?as.factor
?date
?as.Date
Date
date
as.Date()
as.Date
5 == 6
5 > 6
t <- 5 > 6
t
rm(t)
?==
==
2 ^ 8
a <- 5
b <- c(1:3)
c <- 5 < 6
is.vector(a)
is.vector(b)
is.vector(c)
a
mode(a)
class(a)
?print
array(1:100, dim = c(5,5,4))
array(NA, dim = c(5,5,4))
a <- array(NA, dim = c(3,3,3))
a
a
a[2,2,2] <- 3
a
3 == 2
3 == 3
3 = 3
sqrt(-1)
sqrt(4)
print a
print(a)
rm(a)
?int
?scan
int
?integrate
?int
int solveMeFirst(int a, int b)
print(a+b)
summary(int)
search(int)
?integer
a b <- 5
?input
??input
?return
a <-
5
a =
4
2
a
rm(a)
a <- NA
b <- NA
print(a+b)
a <- NA
b <- NA
print(a+b)
N_de_Ouro <- (1+sqrt(5))/2
x <- 4
if(x = 4) {
'isso aqui apareceu'
}
x <- a+b
if(x >= 4, print("hori shitoro"))
matrix(1:9, nrow = 3)
matrix(1:9, nrow = 3)
a <- matrix(1:9, nrow = 3)
View(a)
?c
?matrix
?sample
?rep
?ls
4 != 6
ls()
?i
?for
?for
?else
?ls
?if
i
print("hello world")
?matrix
?input
?function
f
vagas <- read.csv(file = '~/Downloads/vagasOciosasPorCurso.csv')
View(vagas)
vagasOciosasPorCurso <- read.csv(file = 'vagasOciosasPorCurso.csv')
View(vagasOciosasPorCurso)
View(vagasOciosasPorCurso)
str(vagasOciosasPorCurso)
#Correção dos Títulos das Colunas:
names(vagasOciosasPorCurso)[1:10] <- c("Código","Curso","Campus","Alunos Ativos","Vaga 1 Sem","Vaga 2 Sem","Área","Duração Padrão","Fator de Retenção","Vagas Ociosas")
source('~/Documentos/R/Análise Vagas Ociosas.R', echo=TRUE)
class (data.edit1$'Alunos Ativos')
#Criando DF para manipulação, denxando o original como Backup
data.redit1 <- vagasOciosasPorCurso
#Criando DF para manipulação, denxando o original como Backup
data.redit1 <- vagasOciosasPorCurso
class (data.edit1$'Alunos Ativos')
#Criando DF para manipulação, denxando o original como Backup
data.edit1 <- vagasOciosasPorCurso
#Criando DF para manipulação, denxando o original como Backup
data.edit1 <- vagasOciosasPorCurso
class (data.edit1$'Alunos Ativos')
View(vagasOciosasPorCurso)
#Excluindo colunas inúteis e Convertendo strings para numéricos
data.edit1$Código <- NULL
data.edit1$`Duração Padrão` <- NULL
data.edit1$Área <- NULL
data.edit1$`Fator de Retenção` <- NULL
data.edit1$`Alunos Ativos` <- as.numeric(data.edit1$`Alunos Ativos`)
data.edit1$`Vaga 1 Sem` <- as.numeric(data.edit1$`Vaga 1 Sem`)
data.edit1$`Vaga 2 Sem` <- as.numeric(data.edit1$`Vaga 2 Sem`)
data.edit1$`Fator de Retenção` <- as.numeric(data.edit1$`Fator de Retenção`)
data.edit1$`Vagas Ociosas` <- as.numeric(data.edit1$`Vagas Ociosas`)
#Tratando Strings:
levels(data.test$Turno)
#Fundindo Linhas:
data.edit2 <- data.edit1[c(-1,-47,-95,-2),] #excluindo linhas vazias
data.edit2$Campus <- as.factor(data.edit2$Campus)
separate(data.edit2, Curso, sep = "-", into = c("Curso", "Turno")) #não funciona
class(data.edit2$Curso)
# USAR O STRINGR para manipular as strings de curso e uniformizá-las. em seguida
# organizar com tidyr e diplyr
#TESTES:
data.test <- data.edit2
data.test$Turno <- str_extract(data.test$Curso, "\\- [:upper:]") #extrair de turnos e salvar em cursos "- (letramaius)"
data.test$Turno <- str_sub(data.test$Curso, start = -1) #Pegar apenas o último caractere
data.test$Curso <- str_sub(data.test$Curso, end = -4 ) #Pegar apenas do quarto caractere pra tras
data.test$Turno <- as.factor(data.test$Turno)
data.test$Curso <- as.character(data.test$Curso)
curso <- data.test$Curso #criando vetores com as colunas
print(curso)
#curso <- str_replace(curso, "[-]", "")
print(curso)
curso <- str_replace(curso, "[M]$", "")
print(curso)
curso <- str_replace(curso, "[N]$", "")
print(curso)
curso <- str_replace(curso, "[D]$", "")
print(curso)
curso <- str_replace(curso, "[V]$", "")
print(curso)
curso <- str_split(curso, fixed(' - '))
print(curso)
for(i in seq_along(curso)){  #percorre a lista curso e salva o primeiro item de cada linha
curso[i] <- curso[[i]][1]
}
View(data.edit1)
View(data.edit2)
View(data.test)
data.test$Curso <- curso #substitui a col cursos pelos valores limpos
data.test$Curso <- as.character(data.test$Curso) #foi necessário transformar em character antes de passar para factor
data.test$Curso <- as.factor(data.test$Curso)
#agrupando linhas de mesmo nome
#primeiro dividir em dataframes menores e então juntá-los
data.test2 <- data.test
total_vagas1 <- data.test2 %>% #Criando primeiro fragmento (total de vagas 1)
group_by(Curso) %>%
summarise(Total_Vagas1 = sum(`Vaga 1 Sem`)) #Digitar sum(data.test2$'Vaga 1 Sem)
total_vagas1 <- as.data.frame(total_vagas1)
total_vagas2 <- data.test2 %>% #criando segundo fragmento (total vagas 2)
group_by(Curso) %>%
summarise(Total_Vagas2 = sum(`Vaga 2 Sem`))
total_vagas2 <- as.data.frame(total_vagas2)
alunos_ativos <- data.test2 %>% #criando 3º fragmento (Alunos Ativos)
group_by(Curso) %>%
summarise(Alunos_Ativos = sum(`Alunos Ativos`))
alunos_ativos <- as.data.frame(alunos_ativos)
vagas_ociosas <- data.test2 %>% #Criando 4º fragmento (Vagas Ociosas)
group_by(Curso) %>%
summarise(Vagas_Ociosas = sum(`Vagas Ociosas`))
vagas_ociosas <- as.data.frame(vagas_ociosas)
#Finalmente, juntando os fragmentos na construção da tabela final
Final <- inner_join(total_vagas1, total_vagas2, by = "Curso")
Final <- inner_join(Final, vagas_ociosas, by = "Curso")
Final <- inner_join(Final, alunos_ativos, by = "Curso")
vagasOciosasPorCurso <- read.csv(file = 'vagasOciosasPorCurso.csv')
View(vagasOciosasPorCurso)
str(vagasOciosasPorCurso)
#Correção dos Títulos das Colunas:
names(vagasOciosasPorCurso)[1:10] <- c("Código","Curso","Campus","Alunos Ativos","Vaga 1 Sem","Vaga 2 Sem","Área","Duração Padrão","Fator de Retenção","Vagas Ociosas")
#Criando DF para manipulação, denxando o original como Backup
data.edit1 <- vagasOciosasPorCurso
#Excluindo colunas inúteis e Convertendo strings para numéricos
data.edit1$Código <- NULL
data.edit1$`Duração Padrão` <- NULL
data.edit1$Área <- NULL
View(data.edit1)
vagasOciosasPorCurso <- read.csv(file = 'vagasOciosasPorCurso.csv')
View(vagasOciosasPorCurso)
str(vagasOciosasPorCurso)
#Correção dos Títulos das Colunas:
names(vagasOciosasPorCurso)[1:10] <- c("Código","Curso","Campus","Alunos Ativos","Vaga 1 Sem","Vaga 2 Sem","Área","Duração Padrão","Fator de Retenção","Vagas Ociosas")
#Criando DF para manipulação, denxando o original como Backup
data.edit1 <- vagasOciosasPorCurso
#Excluindo colunas inúteis e Convertendo strings para numéricos
data.edit1$Código <- NULL
data.edit1$`Duração Padrão` <- NULL
data.edit1$Área <- NULL
data.edit1$`Fator de Retenção` <- NULL
data.edit1$`Alunos Ativos` <- as.numeric(data.edit1$`Alunos Ativos`)
data.edit1$`Vaga 1 Sem` <- as.numeric(data.edit1$`Vaga 1 Sem`)
data.edit1$`Vaga 2 Sem` <- as.numeric(data.edit1$`Vaga 2 Sem`)
data.edit1$`Fator de Retenção` <- as.numeric(data.edit1$`Fator de Retenção`)
data.edit1$`Vagas Ociosas` <- as.numeric(data.edit1$`Vagas Ociosas`)
#Tratando Strings:
levels(data.test$Turno)
#Fundindo Linhas:
data.edit2 <- data.edit1[c(-1,-47,-95,-2),] #excluindo linhas vazias
data.edit2$Campus <- as.factor(data.edit2$Campus)
separate(data.edit2, Curso, sep = "-", into = c("Curso", "Turno")) #não funciona
class(data.edit2$Curso)
# USAR O STRINGR para manipular as strings de curso e uniformizá-las. em seguida
# organizar com tidyr e diplyr
#TESTES:
data.test <- data.edit2
data.test$Turno <- str_extract(data.test$Curso, "\\- [:upper:]") #extrair de turnos e salvar em cursos "- (letramaius)"
data.test$Turno <- str_sub(data.test$Curso, start = -1) #Pegar apenas o último caractere
data.test$Curso <- str_sub(data.test$Curso, end = -4 ) #Pegar apenas do quarto caractere pra tras
data.test$Turno <- as.factor(data.test$Turno)
data.test$Curso <- as.character(data.test$Curso)
curso <- data.test$Curso #criando vetores com as colunas
print(curso)
#curso <- str_replace(curso, "[-]", "")
print(curso)
curso <- str_replace(curso, "[M]$", "")
print(curso)
curso <- str_replace(curso, "[N]$", "")
print(curso)
curso <- str_replace(curso, "[D]$", "")
print(curso)
curso <- str_replace(curso, "[V]$", "")
print(curso)
curso <- str_split(curso, fixed(' - '))
print(curso)
for(i in seq_along(curso)){  #percorre a lista curso e salva o primeiro item de cada linha
curso[i] <- curso[[i]][1]
}
data.test$Curso <- curso #substitui a col cursos pelos valores limpos
data.test$Curso <- as.character(data.test$Curso) #foi necessário transformar em character antes de passar para factor
data.test$Curso <- as.factor(data.test$Curso)
#agrupando linhas de mesmo nome
#primeiro dividir em dataframes menores e então juntá-los
data.test2 <- data.test
total_vagas1 <- data.test2 %>% #Criando primeiro fragmento (total de vagas 1)
group_by(Curso) %>%
summarise(Total_Vagas1 = sum(`Vaga 1 Sem`)) #Digitar sum(data.test2$'Vaga 1 Sem)
total_vagas1 <- as.data.frame(total_vagas1)
total_vagas2 <- data.test2 %>% #criando segundo fragmento (total vagas 2)
group_by(Curso) %>%
summarise(Total_Vagas2 = sum(`Vaga 2 Sem`))
total_vagas2 <- as.data.frame(total_vagas2)
alunos_ativos <- data.test2 %>% #criando 3º fragmento (Alunos Ativos)
group_by(Curso) %>%
summarise(Alunos_Ativos = sum(`Alunos Ativos`))
alunos_ativos <- as.data.frame(alunos_ativos)
vagas_ociosas <- data.test2 %>% #Criando 4º fragmento (Vagas Ociosas)
group_by(Curso) %>%
summarise(Vagas_Ociosas = sum(`Vagas Ociosas`))
vagas_ociosas <- as.data.frame(vagas_ociosas)
#Finalmente, juntando os fragmentos na construção da tabela final
Final <- inner_join(total_vagas1, total_vagas2, by = "Curso")
Final <- inner_join(Final, vagas_ociosas, by = "Curso")
Final <- inner_join(Final, alunos_ativos, by = "Curso")
lista <- c()
alunos_ativos <- data.test$`Alunos Ativos`
for(i in seq_along(alunos_ativos)){
curso[i] <- curso[[i]][1]
}
lista <- c(98)
View(data.test)
View(data.test2)
#Finalmente, juntando os fragmentos na construção da tabela final
Final <- inner_join(total_vagas1, total_vagas2, by = "Curso")
Final <- inner_join(Final, vagas_ociosas, by = "Curso")
Final <- inner_join(Final, alunos_ativos, by = "Curso")
vagasOciosasPorCurso <- read.csv(file = 'vagasOciosasPorCurso.csv')
View(vagasOciosasPorCurso)
str(vagasOciosasPorCurso)
#Correção dos Títulos das Colunas:
names(vagasOciosasPorCurso)[1:10] <- c("Código","Curso","Campus","Alunos Ativos","Vaga 1 Sem","Vaga 2 Sem","Área","Duração Padrão","Fator de Retenção","Vagas Ociosas")
#Criando DF para manipulação, denxando o original como Backup
data.edit1 <- vagasOciosasPorCurso
#Excluindo colunas inúteis e Convertendo strings para numéricos
data.edit1$Código <- NULL
data.edit1$`Duração Padrão` <- NULL
data.edit1$Área <- NULL
data.edit1$`Fator de Retenção` <- NULL
data.edit1$`Alunos Ativos` <- as.numeric(data.edit1$`Alunos Ativos`)
data.edit1$`Vaga 1 Sem` <- as.numeric(data.edit1$`Vaga 1 Sem`)
data.edit1$`Vaga 2 Sem` <- as.numeric(data.edit1$`Vaga 2 Sem`)
data.edit1$`Fator de Retenção` <- as.numeric(data.edit1$`Fator de Retenção`)
data.edit1$`Fator de Retenção` <- as.numeric(data.edit1$`Fator de Retenção`)
data.edit1$`Vagas Ociosas` <- as.numeric(data.edit1$`Vagas Ociosas`)
#Tratando Strings:
levels(data.test$Turno)
data.test <- data.edit1
vagasOciosasPorCurso <- read.csv(file = 'vagasOciosasPorCurso.csv')
View(vagasOciosasPorCurso)
str(vagasOciosasPorCurso)
#Correção dos Títulos das Colunas:
names(vagasOciosasPorCurso)[1:10] <- c("Código","Curso","Campus","Alunos Ativos","Vaga 1 Sem","Vaga 2 Sem","Área","Duração Padrão","Fator de Retenção","Vagas Ociosas")
#Criando DF para manipulação, deixando o original como Backup
data.edit1 <- vagasOciosasPorCurso
#Excluindo colunas inúteis e Convertendo strings para numéricos
data.edit1$Código <- NULL
data.edit1$`Duração Padrão` <- NULL
data.edit1$Área <- NULL
data.edit1$`Fator de Retenção` <- NULL
data.edit1$`Alunos Ativos` <- as.numeric(data.edit1$`Alunos Ativos`)
data.edit1$`Vaga 1 Sem` <- as.numeric(data.edit1$`Vaga 1 Sem`)
data.edit1$`Vaga 2 Sem` <- as.numeric(data.edit1$`Vaga 2 Sem`)
data.edit1$`Fator de Retenção` <- as.numeric(data.edit1$`Fator de Retenção`)
data.edit1$`Vagas Ociosas` <- as.numeric(data.edit1$`Vagas Ociosas`)
#Fundindo Linhas:
data.edit2 <- data.edit1[c(-1,-47,-95,-2),] #excluindo linhas vazias
data.edit2$Campus <- as.factor(data.edit2$Campus)
separate(data.edit2, Curso, sep = "-", into = c("Curso", "Turno")) #não funciona, pesquisar dps
class(data.edit2$Curso)
data.test <- data.edit2
#Tratando Strings:
levels(data.test$Turno)
data.test$Turno <- str_extract(data.test$Curso, "\\- [:upper:]") #extrair de turnos e salvar em cursos "- (letramaius)"
View(data.test)
vagasOciosasPorCurso <- read.csv(file = 'vagasOciosasPorCurso.csv')
View(vagasOciosasPorCurso)
str(vagasOciosasPorCurso)
#Correção dos Títulos das Colunas:
names(vagasOciosasPorCurso)[1:10] <- c("Código","Curso","Campus","Alunos Ativos","Vaga 1 Sem","Vaga 2 Sem","Área","Duração Padrão","Fator de Retenção","Vagas Ociosas")
#Criando DF para manipulação, deixando o original como Backup
data.edit1 <- vagasOciosasPorCurso
#Excluindo colunas inúteis e Convertendo strings para numéricos
data.edit1$Código <- NULL
data.edit1$`Duração Padrão` <- NULL
data.edit1$Área <- NULL
data.edit1$`Fator de Retenção` <- NULL
data.edit1$`Alunos Ativos` <- as.numeric(data.edit1$`Alunos Ativos`)
data.edit1$`Vaga 1 Sem` <- as.numeric(data.edit1$`Vaga 1 Sem`)
data.edit1$`Vaga 2 Sem` <- as.numeric(data.edit1$`Vaga 2 Sem`)
data.edit1$`Fator de Retenção` <- as.numeric(data.edit1$`Fator de Retenção`)
data.edit1$`Vagas Ociosas` <- as.numeric(data.edit1$`Vagas Ociosas`)
#Fundindo Linhas:
data.edit2 <- data.edit1[c(-1,-47,-95,-2),] #excluindo linhas vazias
data.edit2$Campus <- as.factor(data.edit2$Campus)
separate(data.edit2, Curso, sep = "-", into = c("Curso", "Turno")) #não funciona, pesquisar dps
class(data.edit2$Curso)
data.test <- data.edit2
#Tratando Strings:
levels(data.test$Turno)
data.test$Turno <- str_extract(data.test$Curso, "\\- [:upper:]") #extrair de turnos e salvar em cursos "- (letramaius)"
library(stringr)
library(dbplyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(purrr)
library(stringr)
library(dbplyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(purrr)
install.packages("pacman")
require(pacman)
library(pacman)
install.packages("pacman")
library(stringr)
library(dbplyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(purrr)
vagasOciosasPorCurso <- read.csv(file = 'vagasOciosasPorCurso.csv')
View(vagasOciosasPorCurso)
str(vagasOciosasPorCurso)
#Correção dos Títulos das Colunas:
names(vagasOciosasPorCurso)[1:10] <- c("Código","Curso","Campus","Alunos Ativos","Vaga 1 Sem","Vaga 2 Sem","Área","Duração Padrão","Fator de Retenção","Vagas Ociosas")
#Criando DF para manipulação, deixando o original como Backup
data.edit1 <- vagasOciosasPorCurso
#Excluindo colunas inúteis e Convertendo strings para numéricos
data.edit1$Código <- NULL
data.edit1$`Duração Padrão` <- NULL
data.edit1$Área <- NULL
data.edit1$`Fator de Retenção` <- NULL
data.edit1$`Alunos Ativos` <- as.numeric(data.edit1$`Alunos Ativos`)
data.edit1$`Vaga 1 Sem` <- as.numeric(data.edit1$`Vaga 1 Sem`)
data.edit1$`Vaga 2 Sem` <- as.numeric(data.edit1$`Vaga 2 Sem`)
data.edit1$`Fator de Retenção` <- as.numeric(data.edit1$`Fator de Retenção`)
data.edit1$`Vagas Ociosas` <- as.numeric(data.edit1$`Vagas Ociosas`)
#Fundindo Linhas:
data.edit2 <- data.edit1[c(-1,-47,-95,-2),] #excluindo linhas vazias
data.edit2$Campus <- as.factor(data.edit2$Campus)
separate(data.edit2, Curso, sep = "-", into = c("Curso", "Turno")) #não funciona, pesquisar dps
class(data.edit2$Curso)
data.test <- data.edit2
#Tratando Strings:
levels(data.test$Turno)
data.test$Turno <- str_extract(data.test$Curso, "\\- [:upper:]") #extrair de turnos e salvar em cursos "- (letramaius)"
install.packages("tidyverse")
library(stringr)
library(dbplyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(purrr)
vagasOciosasPorCurso <- read.csv(file = 'vagasOciosasPorCurso.csv')
View(vagasOciosasPorCurso)
str(vagasOciosasPorCurso)
#Correção dos Títulos das Colunas:
names(vagasOciosasPorCurso)[1:10] <- c("Código","Curso","Campus","Alunos Ativos","Vaga 1 Sem","Vaga 2 Sem","Área","Duração Padrão","Fator de Retenção","Vagas Ociosas")
#Criando DF para manipulação, deixando o original como Backup
data.edit1 <- vagasOciosasPorCurso
#Excluindo colunas inúteis e Convertendo strings para numéricos
data.edit1$Código <- NULL
data.edit1$`Duração Padrão` <- NULL
data.edit1$Área <- NULL
data.edit1$`Fator de Retenção` <- NULL
data.edit1$`Alunos Ativos` <- as.numeric(data.edit1$`Alunos Ativos`)
data.edit1$`Vaga 1 Sem` <- as.numeric(data.edit1$`Vaga 1 Sem`)
data.edit1$`Vaga 2 Sem` <- as.numeric(data.edit1$`Vaga 2 Sem`)
data.edit1$`Fator de Retenção` <- as.numeric(data.edit1$`Fator de Retenção`)
data.edit1$`Vagas Ociosas` <- as.numeric(data.edit1$`Vagas Ociosas`)
#Fundindo Linhas:
data.edit2 <- data.edit1[c(-1,-47,-95,-2),] #excluindo linhas vazias
data.edit2$Campus <- as.factor(data.edit2$Campus)
separate(data.edit2, Curso, sep = "-", into = c("Curso", "Turno")) #não funciona, pesquisar dps
class(data.edit2$Curso)
data.test <- data.edit2
#Tratando Strings:
levels(data.test$Turno)
data.test$Turno <- str_extract(data.test$Curso, "\\- [:upper:]") #extrair de turnos e salvar em cursos "- (letramaius)"
data.test$Turno <- str_sub(data.test$Curso, start = -1) #Pegar apenas o último caractere
data.test$Curso <- str_sub(data.test$Curso, end = -4 ) #Pegar apenas do quarto caractere pra tras
data.test$Turno <- as.factor(data.test$Turno)
data.test$Curso <- as.character(data.test$Curso)
install.packages("stringr")
install.packages("tidyverse")
